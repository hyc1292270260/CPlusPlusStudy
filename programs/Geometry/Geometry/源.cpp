/* The codes below are generated by 'Element Studio'. */

#include <windows.h>
#include <windowsx.h>
#include "GeometryFactory.h"
#include "GeometryManager.h"
#include "GeometryRender.h"
#include "IRender.h"
#include "Line.h"
#include "Ellipse.h"
#include "Rectangle.h"
#include "resource.h"
// declarations

using namespace geometry_drawing;
long __stdcall WndProcdure(HWND hWnd, unsigned message, unsigned wParam, long lParam);

// function defines
int __stdcall wWinMain(HINSTANCE hInstance, HINSTANCE hPreInstance, wchar_t * lpCmdLine, int iCmdShow)
{
	wchar_t szAppName[] = L"WinApp";
	WNDCLASSEX wcex = { 0 };
	wcex.cbSize = sizeof(wcex);
	wcex.style = CS_HREDRAW | CS_VREDRAW;
	wcex.lpfnWndProc = &WndProcdure;
	wcex.cbClsExtra = 0;
	wcex.cbWndExtra = 0;
	wcex.hInstance = hInstance;
	wcex.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	wcex.hCursor = LoadCursor(NULL, IDC_ARROW);
	wcex.hbrBackground = (HBRUSH)(GetStockObject(WHITE_BRUSH));
	wcex.lpszMenuName = (wchar_t*)MAKEINTRESOURCEA(IDR_MENU1);
	wcex.lpszClassName = szAppName;
	wcex.hIconSm = wcex.hIcon;
	if (!RegisterClassEx(&wcex))
	{
		return -1;
	}
	HWND hWnd = NULL;
	
	hWnd = CreateWindowEx(WS_EX_OVERLAPPEDWINDOW, szAppName, L"App", WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, NULL, NULL, hInstance, NULL);
	ShowWindow(hWnd, iCmdShow);
	UpdateWindow(hWnd);
	
	MSG msg;
	while (GetMessage(&msg, NULL, 0, 0))
	{
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}
	return msg.wParam;
}
POINT privious_pt;
GeometryRender* geometry_render = nullptr;
int current = 0;
long __stdcall WndProcdure(HWND hWnd, unsigned message, unsigned wParam, long lParam)
{
	HMENU hMenu = NULL;
	HDC hDC = NULL;
	PAINTSTRUCT ps;
	switch (message)
	{
	case WM_CREATE:
	{
		geometry_render = new GeometryRender;
		geometry_render->initialize();
		return 0;
	}
	case WM_COMMAND:
	{
		hMenu = GetMenu(hWnd);
		switch (wParam)
		{
		case ID_40001:
			current = 1;
			break;
		case ID_40002:
			current = 2;
			break;
		case ID_40003:
			current = 3;
			break;
		default:
			break;
		}
		return 0;
	}
	case WM_PAINT:
	{
		hDC = BeginPaint(hWnd, &ps);
		std::shared_ptr<IGeometryIterator>it = GeometryManager::get_instance()->get_geometry_iterator();
		while (it->has_next())
		{
			if (typeid(*it->current()) == typeid(geometry_drawing::Line))
			{
				geometry_render->get_render(L"Line")->render(hDC, it->current());
			}
			else if (typeid(*it->current()) == typeid(geometry_drawing::Rectangle))
			{
				geometry_render->get_render(L"Rectangle")->render(hDC, it->current());
			}
			else if (typeid(*it->current()) == typeid(geometry_drawing::Ellipse))
			{
				geometry_render->get_render(L"Ellipse")->render(hDC, it->current());
		    }
			it->move_next();
		}
		EndPaint(hWnd, &ps);
		return 0;
	}
	case  WM_LBUTTONDOWN:
	{
		privious_pt.x = GET_X_LPARAM(lParam);
		privious_pt.y = GET_Y_LPARAM(lParam);
		return 0;
	}
	case  WM_LBUTTONUP:
	{
		POINT pt;
		pt.x = GET_X_LPARAM(lParam);
		pt.y = GET_Y_LPARAM(lParam);
		if(current == 1)
		{
			IGeometry* geometry = GeometryFactory::get_instance()->create_geometry(
				L"Line",				
				privious_pt.x,
				privious_pt.y,
				pt.x,
				pt.y);
			GeometryManager::get_instance()->add_geometry(geometry);
		}
		else if (current == 2)
		{

			IGeometry* geometry = GeometryFactory::get_instance()->create_geometry(
				L"Rectangle",
				privious_pt.x,
				privious_pt.y,
				pt.x,
				pt.y);
			GeometryManager::get_instance()->add_geometry(geometry);
			
		}
		else if (current == 3)
		{
			IGeometry* geometry = GeometryFactory::get_instance()->create_geometry(
				L"Ellipse",
				privious_pt.x,
				privious_pt.y,
				pt.x,
				pt.y);
			GeometryManager::get_instance()->add_geometry(geometry);
		}
		
		::InvalidateRect(hWnd, nullptr, true);
		return 0;


	}
	case WM_DESTROY:
	{
		if (geometry_render)
		{
			geometry_render->shutdown();
		}
		GeometryFactory::destroy_instance();
		GeometryManager::destroy_instance();
		PostQuitMessage(0);
		return 0;
	}
	}
	return DefWindowProc(hWnd, message, wParam, lParam);
}



